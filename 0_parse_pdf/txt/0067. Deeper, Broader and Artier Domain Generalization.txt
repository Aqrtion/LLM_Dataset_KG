Deeper, Broader and Artier Domain Generalization

Da Li Yongxin Yang Yi-Zhe Song

Timothy M. Hospedales

Queen Mary University of London University of Edinburgh {da.li, yongxin.yang, yizhe.song}@qmul.ac.uk, t.hospedales@ed.ac.uk

7 1 0 2

t c O 9

]

V C . s c [

1 v 7 7 0 3 0 . 0 1 7 1 : v i X r a

Abstract

The problem of domain generalization is to learn from multiple training domains, and extract a domain-agnostic model that can then be applied to an unseen domain. Domain generalization (DG) has a clear motivation in contexts where there are target domains with distinct characteristics, yet sparse data for training. For example recognitioninsketchimages, whicharedistinctlymoreabstractand rarer than photos. Nevertheless, DG methods have primarily been evaluated on photo-only benchmarks focusing on alleviating the dataset bias where both problems of domain distinctiveness and data sparsity can be minimal. We argue that these benchmarks are overly straightforward, and show that simple deep learning baselines perform surprisingly well on them.

In this paper, we make two main contributions: Firstly, we build upon the favorable domain shift-robust properties of deep learning methods, and develop a low-rank parameterized CNN model for end-to-end DG learning. Secondly, we develop a DG benchmark dataset covering photo, sketch, cartoon and painting domains. This is both more practically relevant, and harder (bigger domain shift) than existing benchmarks. The results show that our method outperforms existing DG alternatives, and our dataset provides a more signiﬁcant DG challenge to drive future research.

1. Introduction

Learning models that can bridge train-test domain-shift is a topical issue in computer vision and beyond. In vision this has been motivated recently by the observation of signiﬁcant bias across popular datasets [27], and the poor performance of state-of-the-art models when applied across datasets. Existing approaches can broadly be categorized into domain adaptation (DA) methods, that use (un)labeled target data to adapt source model(s) to a speciﬁc target domain [23]; and domain generalization (DG) approaches, that learn a domain agnostic model from multiple sources that can be applied to any target domain [12, 10]. While DA has been more commonly studied, DG is the more valuable

Figure 1: Contrast between prior Caltech Ofﬁce and VLCS datasets versus our new PACS dataset. The domain generalization task is to recognize categories in an unseen testing domain. PACS provides more diverse domains with bigger more challenging domain-shifts between them.

yet challenging setting, as it does not require acquisition of a large target domain set for off-line analysis to drive adaptation. Such data may not even exist if the target domain is sparse. Instead it aims to produce a more human-like model, where there is a deeper semantic sharing across different domains – a dog is a dog no matter if it is depicted in the form of a photo, cartoon, painting, or indeed, a sketch. The most popular existing DA/DG benchmarks deﬁne domains as photos of objects spanning different camera types [23], or datasets collected with different composition biases [27]. While these benchmarks provide a good start, we argue that they are neither well motivated nor hard enough to drive the ﬁeld. Motivation: The constituent domains/datasets in existing benchmarks are based upon conventional photos, albeit with different camera types or composition bias. However there exist enough photos, that

PhotoArt paintingSketchTrainTestVLCSCaltech-Office TrainTestCartoonDomain shift

one could in principle collect enough target domain-speciﬁc data to train a good model, or enough diverse data to cover all domains and minimize bias (thus negating the need for DA). A more compelling motivation is domains where the total available images is fundamentally constrained, such as for particular styles of art [5, 29], and sketches [33, 6, 34, 26]. Compared to photos, there may simply not be enough examples of a given art style to train a good model, even if we are willing to spend the effort. Difﬁculty: The camera type and bias differences between domains in existing benchmarks are already partially bridged by contemporary Deep features [4, 32], thus questioning the need for DA or DG methods. In this paper, we show that multidomain deep learning provides a very simple but highly effective approach to DG that outperforms existing purposedesigned methods.

To address these limitations, we provide a harder and better motivated benchmark dataset PACS, consisting of images from photo (P), art painting (A), cartoon (C), and sketch (S) domains. This benchmark carries two important advancements over prior examples: (i) it extends the previously photo-only setting in DA/DG research, and uniquely includes domains that are maximally distinct from each other, spanning a wide spectrum of visual abstraction, from photos that are the least abstract to human sketches which are the most abstract; (ii) it is more reﬂective of a real-world task where a target domain (such as sketch) is intrinsically sparse, and so DG from a more abundant domain (such as photos) is really necessary. As illustrated qualitatively in Fig. 1, the benchmark is harder, as the domains are visually more distinct than in prior datasets. We explore these differences quantitatively in Sec. 4.2.

There have been a variety of prior approaches to DG based on SVM [12, 30], subspace learning [19], metric learning [7], and autoencoders [10]. Despite their differences, most of these have looked at ﬁxed shallow features. In this paper, we address the question of how end-to-end learning of deep features impacts the DG setting. Our deep learning approach trains on multiple source domains, and extracts both domain agnostic features (e.g., convolutional kernels), and classiﬁer (e.g., ﬁnal FC layer) for transfer to a new target domain. This approach can be seen as a deep multi-class generalization of the shallow binary Undo Bias method [12], which takes the form of a dynamically parameterized deep neural network [25]. However, the resulting number of parameters grows linearly with the number of source domains (of which ultimately, we expect many for DG), increasing overﬁtting risk. To address this we develop a low-rank parameterized neural network which reduces the number of parameters. Furthermore the low-rank approach provides an additional route to knowledge sharing besides through explicit parameterization. In particular it has the further beneﬁt of automatically modeling how related the

different domains are (e.g., perhaps sketch is similar to cartoon; and cartoon is similar to painting), and also how the degree of sharing should vary at each layer of the CNN.

To summarize our contributions: Firstly, we highlight the weaknesses of existing methods (they lose to a simple deep learning baseline) and datasets (their domain shift is small). Second, we introduce a new, better motivated, and more challenging DG benchmark. Finally, we develop a novel DG method based on low-rank parameterized CNNs that shows favorable performance compared to prior work.

2. Related work

Domain Generalization Despite different methodological tools (SVM, subspace learning, autoencoders, etc), existing methods approach DG based on a few different intuitions. One is to project the data to a new domain invariant representation where the differences between training domains is minimized [19, 10], with the intuition that such a space will also be good for an unseen testing domain. Another intuition is to predict which known domain a testing sample seems most relevant to, and use that classiﬁer [30]. Finally, there is the idea of generating a domain agnostic classiﬁer, for example by asserting that each training domain’s classiﬁer is the sum of a domain-speciﬁc and domain-agnostic weight vector [12]. The resulting domainagnostic weight vector can then be extracted and applied to held out domains. Our approach lies in this latter category. However, prior work in this area has dealt with shallow, linear models only. We show how to extend this intuition to end-to-end learning in CNNs, while limiting the resulting parameter growth, and making the sharing structure richer than an unweighted sum.

There has been more extensive work on CNN models for domain adaptation, with methods developed for encouraging CNN layers to learn transferable features [9, 17]. However, these studies have typically not addressed our domain generalizationsetting. Moreover, asanalysishasshownthat the transferability of different layers in CNNs varies significantly [32], these studies have had carefully hand designed the CNN sharing structure to address their particular DA problems. In our benchmark, this is harder, as the gaps between our more diverse domains are unknown and likely to be more variable. However, our low-rank modeling approachprovidesthebeneﬁtofautomaticallyestimatingboth the per-domain and per-layer sharing strength.

Domain Generalization is also related to learning to learn. Learning to learn methods aim to learn not just speciﬁc concepts or skills, but learning algorithms or problem agnostic biases that improve generalization [20, 22, 8]. Similarly DG is to extract common knowledge from source domains that applies to unseen target domains. Thus our method can be seen as a simple learning to learn method for

the DG setting. Different from few-shot learning [8, 22], DG is a zero-shot problem as performance is immediately evaluated on the target domain with no further learning.

Neural Network Methods Our DG method is related to parameterized neural networks [1, 25], in that the parameters are set based on external metadata. In our case, based on a description of the current domain, rather than an instance[1], oradditionalsensor[25]. Itisalsorelatedtolowrank neural network models, typically used to compress [13] and speed up [16] CNNs, and have very recently been explored for cross-category CNN knowledge transfer [31]. In our case we exploit this idea both for compression – but across rather than within domains [13], as well as for crossdomain (rather than cross-category [31]) knowledge sharing. Different domains can share parameters via common latent factors. [2] also addresses the DG setting, but learns shared parameters based on image reconstruction, whereas ours is learned via paramaterizing each domain’s CNN. As a parameterized neural network, our approach also differs from all those other low-rank methods [13, 16, 31], which have a ﬁxed parameterization.

2.1. Benchmarks and Datasets

DG Benchmarks The most popular DG benchmarks are: ‘Ofﬁce’ [23] (containing Amazon/Webcam/DSLR images), later extended to include a fourth Caltech 101 domain [11] (OfﬁceCaltech) and Pascal 2007, LabelMe, Caltech, SUN09 (VLCS) [27, 12]. The domains within Ofﬁce relate to different camera types, and the others are created by the biases of different data collection procedures [27]. Despite the famous analysis of dataset bias [27] that motivated the creationoftheVLCSbenchmark, it waslatershownthat the domain shift is much smaller with recent deep features [4]. Thus recent DG studies have used deep features [10], to obtain better results. Nevertheless, we show that a very simple baseline of ﬁne-tuning deep features on multiple source domains performs comparably or better than prior DG methods. ThismotivatesourdesignofaCNN-basedDGmethod, as well as our new dataset (Fig 1) which has greater domain shift than the prior benchmarks. Our dataset draws on nonphotorealistic and abstract visual domains which provide a better motivated example of the sort of relatively sparse data domain where DG would be of practical value. Non-photorealistic Image Analysis Non-photorealistic image analysis is a growing subﬁeld of computer vision that extends the conventional photo-only setting of vision research to include other visual depictions (often more abstract) such as paintings and sketches. Typical tasks include instance-level matching between sketch-photo [33, 24], and art-photo domains [3], and transferring of object recognizers trained on photos to detect objects in art [5, 29]. Most prior work focuses on two domains (such as photo and painting [5, 29], or photo and sketch [33, 24]). Studies have

investigated simple ‘blind’ transfer between domains [5], learning cross-domain projections [33, 3], or engineering structured models for matching [29]. Thus, in contrast to our DG setting, prior non-photorealistic analyses fall into either cross-domain instance matching, or domain adaptation settings. To create our benchmark, we aggregate multiple domains including paintings, cartoons and sketches, and deﬁne a comprehensive domain-generalization benchmark covering a wide spectrum of visual abstraction based upon these. Thus in contrast to prior DG benchmarks, our domain-shifts are bigger and more challenging.

3. Methodology

j

j )}Ni

j ,y(i)

j=1 where x(i)

Assume we observe S domains, and the ith domain contains Ni labeledinstances {(x(i) isthe input data (e.g., an image) for which we assume they are of the same size among all domains (e.g., all images are cropped into the same size), and y(i) j ∈ {1...C} is the class label. We assume the label space is consistent across domains. The objective of DG is to learn a domain agnostic model which can be applied to unseen domains in the future. In contrast to domain adaptation, we can not access the labeled or unlabeled examples from those domains to which the model is eventually applied. So the model is supposed to extract the domain agnostic knowledge within the observed domains. In the training stage, we will minimize the empirical error for all observed domains,

argmin Θ1,Θ2,...,ΘS

1 S

S (cid:88)

i=1

1 Ni

Ni(cid:88)

j=1

(cid:96)(ˆy(i) j

,y(i) j )

(1)

j = f(x(i)

where (cid:96) is the loss function that measures the error between the predicted label ˆy and the true label y, and prediction is carried out by a function ˆy(i) j |Θi) parameterized by Θi. A straightforward approach to ﬁnding a domain agnostic model is to assume Θ∗ = Θ1 = Θ2 = ··· = ΘS, i.e., there exists a universal model Θ∗. Doing so we literally ignore the domain difference. Alternatively, Undo-Bias [12] considers linear models, and assumes that the parameter (a D-dimensional vector when x ∈ RD) for the ith domain is in the form Θ(i) = Θ(0) + ∆(i), where Θ(0) can be seen as a domain agnostic model that beneﬁts all domains, and ∆(i) is a domain speciﬁc bias term. Conceptually, Θ(0) can also serve as the classiﬁer for any unseen domains. [12] showed that (for linear models) Θ(0) is better than the universal model Θ∗ trained by j ) in terms of testargmin Θ∗

j=1 (cid:96)(ΘT

j ,y(i)

∗ x(i)

(cid:80)Ni

(cid:80)S

1 Ni

i=1

1 S

ing performance on unseen domains. However we show that for deep networks, a universal model f(x|Θ∗) is a strong baseline that requires improved methodology to beat.

3.1. Parameterized Neural Network for DG

3.2. Low rank parameterized CNNs

To extend the idea of Undo-Bias [12] into the neural network context, it is more convenient to think Θ(i) is generated from a function g(z(i)|Θ) parameterized by Θ. Here z(i) is a binary vector encoding of the ith domain with two properties: (i) it is of length S + 1 where S is the number of observed domains; (ii) it always has only two units activated (being one): the ith unit active for the ith domain and the last unit active for all domains. Formally, the objective function becomes,

argmin Θ

1 S

S (cid:88)

i=1

1 Ni

Ni(cid:88)

j=1

(cid:96)(ˆy(i) j

,y(i) j )

(2)

where ˆy(i)

j = f(x(i)

j |Θi) = f(x(i)

j |g(z(i)|Θ)).

To reproduce Undo-Bias [12], we can stack all parami.e., Θ = eters in a column-wise fashion to form Θ, [∆(1),∆(2),...,∆(S),Θ(0)], and choose the g(·) function to be linear mapping: g(z(i)|Θ) = Θz(i). From linear to multi-linear The method as described so far generates the model parameter in the form of vector thus it is only suitable for single-out setting (univariate regression or binary classiﬁcation). To generate higher order parameters, weuseamulti-linearmodel, whereΘis(3rdorder or higher) tensor. E.g., to generate a weighting matrix for a fully-connected layer in neural network, we can use

W(i)

FC = g(z(i)|W) = W ×3 z(i)

(3)

Here ×3 is the inner product between tensor and vector along tensor’s 3rd axis. For example if W is the weight matrix of size H × C (i.e., the number of input neurons is H and the number of output neurons is C) then W is a H × C × (S + 1) tensor.

If we need to generate the parameter for a convolutional layer of size D1×D2×F1×F2 (Height×Width×Depth× Filter Number), then we use:

W(i)

CONV = g(z(i)|W) = W ×5 z(i)

(4)

where W is a 5th order tensor of size D1×D2×F1×F2× (S + 1).

Domain generalization Using one such parameter generating function per layer, we can dynamically generate the weights at every layer of a CNN based on the encoded vector of every domain. In this approach, knowledge sharing is realized through the last (bias) bit in the encoding of z. I.e., every weight tensor for a given domain is the sum of a domain speciﬁc tensor and a (shared) domain agnostic tensor. For generalization to an unseen domain, we apply the one-hot, bias-only, vector z∗ = [0,0,...,0,1] to synthesize a domain agnostic CNN.

The method as described so far has two limitations: (i) the required parameters to learn now grow linearly in the number of domains (which we eventually hope to be large to achieve good DG), and (ii) the sharing structure is very prescribed: every parameter is an equally weighted sum of its domain agnostic and domain-speciﬁc bias partners.

To alleviate these two issues, we place a structural constraint on W. Motivated by the well-known Tucker decomposition [28], we assume that the M-order tensor W is synthesized as:

W = G ×1 U1 ··· ×M UM

(5)

where G is a K1 × ...KM sized low-rank core tensor, and Um are Km × Dm matrices (note that DM = S + 1). By controlling the ranks K1 ...KM we can effectively reduce the number of parameters to learn. By learning {G,U1 ...UM} instead of W, the number of parameters is reduced from (D1 × ··· × DM−1 × (S + 1)) to (K1 ×...KM)+(cid:80)M−1 m=1 Dm ×Km +KM ×(S +1). Besides, UM produces a KM-dimensional dense vector that guides how to linearly combine the shared factors, which is much more informative than the original case of equally weighted sum.

Given a tensor W the Tucker problem can be solved via

high-order singular value decomposition (HO-SVD) [15].

G = W ×1 UT

1 ··· ×M UT M

(6)

where Un is the U matrix from the SVD of the the mode-n ﬂattening of W. However, note that aside from (optionally) performing this once for initialization, we do not perform this costly HO-SVD operation during learning.

Inference and Learning To make predictions for a particular domain, we synthesize a concrete CNN by multiplying out the parameters {G,U1,...,UM} after that doing an inner product with the corresponding domain’s z. This CNN can then be used to classify an input instance x. Since our method does not introduce any non-differentiable functions, we can use standard back-propagation to learn {G,U1,...,UM} for every layer.

For our model there are hyperparameters – Tucker rank [K1 ...KM] – that can potentially be set at each layer. We sidestep the need to set all of these, by using the strategy of decomposing the stack of (ImageNet pre-trained) single domain models plus one agnostic domain model through Tucker decomposition, and then applying a reconstruction error threshold of (cid:15) = 10% for the HO-SVD in Eq 6. This effectively determines all rank values via one ‘sharing strength’ hyperparameter (cid:15).

4. Experiments

4.1. New Domain Generalization Dataset: PACS

Our PACS DG dataset is created by intersecting the classes found in Caltech256 (Photo), Sketchy (Photo, Sketch) [24], TU-Berlin (Sketch) [6] and Google Images (Art painting, Cartoon, Photo). Our dataset and code, together with latest results using alternative state-of-the-art base networks, can be found at: http://sketchx. eecs.qmul.ac.uk/. PACS: Our new benchmark includes 4 domains (Photo, Sketch, Cartoon, Painting), and 7 common categories ‘dog’, ‘guitar’, ‘horse’, ‘house’, ‘person’. ‘elephant’, ‘giraffe’. The total number of images is 9991.

4.2. Characterizing Benchmarks’ Domain Shifts

We ﬁrst perform a preliminary analysis to contrast the domain shift within our PACS dataset to that of prior popular datasets such as VLCS. We make this contrast from both a feature space and a classiﬁer performance perspective. Feature Space Analysis Given the DG setting of training on source domains and applying to held out test domain(s), we measure the shift between source and target domains based on the Kullback-Leibler divergence as: m (cid:80) Dshift(Ds,Dt) = 1 j and m are the number of source and target domains, and λi weights the i th source domain, to account for data imbalance. To encode each domain as a probability, we calculate the mean DECAF7 representation over instances and then apply softmax normalization.

λiKLD(Ds

j), where n

i||Dt

n (cid:80) i

m×n

Classiﬁer Performance Analysis We also compare the datasets by the margin between multiclass classiﬁcation accuracy of within-domain learning, and a simple crossdomain baseline of training a CNN on all the source domains before testing on the held out target domain (as we shall see later, this baseline is very competitive). Assuming within-domain learning performance is an upper bound, then this difference indicates the space which a DG method has to make a contribution, and hence roughly reﬂects size of the domain-shift/difﬁculty of the DG task.

Results Fig. 2(a) shows the average domain-shift in terms of KLD across all choices of held out domain in our new PACS benchmark, compared with the VLCS benchmark [27]. Clearly the domain shift is signiﬁcantly higher in our new benchmark, as is visually intuitive from the illustrative examples in Fig. 1. To provide a qualitative summarization, we also show the distribution of features in our PACS compared to VLCS in Fig. 2(b,c) as visualized by a 2 dimensional t-SNE [18] plot, where the features are categorized and colored by their associated domain. From this result, we can see that the VLCS data are generally hard to sepa-

rate by domain, while our PACS data are much more separated by domain. This illustrates the greater degree of shift between the domains in PACS over VLCS.

We next explore the domain shifts from a model-, rather than feature-centric perspective. Fig. 3a summarizes the within-domainandacross-domainperformanceforeachdomain within PACS and VLCS benchmarks. The average drop in performance due to cross-domain transfer is 20.2% for PACS versus 10.0% for VLCS. This shows that the scope for contribution of DG/DA in our PACS is double that of VLCS, and illustrates the greater relevance and challenge of the PACS benchmark.

4.3. Domain Generalization Experiments

4.3.1 Datasets and Settings

We evaluate our proposed method on two datasets: VLCS, and our proposed PACS dataset. VLCS [27] aggregates photos from Caltech, LabelMe, Pascal VOC 2007 and SUN09. It provides a 5-way multiclass benchmark on the ﬁve common classes: ’bird’,’car’,’chair’,’dog’ and ’person’. Our PACS (described in Sec. 4.1) with 7 classes from Photo, Sketch, Cartoon, Painting domains. All results are evaluated by multi-class accuracy, following [10]. We explore features including Classic SIFT features (for direct comparison with earlier work), DECAF pre-extracted deep features following [10], and E2E end-to-end CNN learning.

Settings: For our method in E2E conﬁguration, we use the ImageNet pre-trained AlexNet CNN, ﬁne-tuned with multi-domain learning on the training domains. On VLCS, we follow the train-test split strategy from [10]. Our initial learning rate is 5e-5 and batch size is 64 for each training domain. We use the best performed model on validation to do the test after tuning the model for 25k iterations. On PACS, we split the images from training domains to 9 (train) : 1 (val) and test on the whole held-out domain. Recall that our model uses a 2-hot encoding of z to parameterize the CNN. The domain-speciﬁc vs agnostic ‘prior’ can be set by varying the ratio ρ of the elements in the 2-hot coding. For training we use ρ = 0.3, so z = {[0,0,0.3,1], [0,0.3,0,1],...}. For DG testing we use z = [0,0,0,1].

Baselines: We evaluate our contributions by comparison with number of alternatives including variants designed to reveal insights, and state of the art competitors: Ours-MLP: Our DG method applied to a 1 hidden layer multi-layer perception. For use with pre-extracted features. Ours-Full: Our full low-rank parameterized CNN trained end-to-end on images. SVM: Linear SVM, applied on the aggregation of data from all source domains. Deep-All: Pretrained Alexnet CNN [14], ﬁne-tuned on the aggregation of all source domains. Undo-Bias: Modiﬁes traditional SVM to include a domain-speciﬁc and global weight vector which can be extracted for DG [12]. The original

(a) Average KLD between domains.

(b) The feature distribution of VLCS

(c) The feature distribution of PACS

Figure 2: Evaluation of domain shift in different domain generalization benchmarks.

(a) Measuring domain-shift by within versus across domain accuracy. Left: Our PACS, Middle: VLCS. Right: Distribution of margins between within and across domain accuracy.

(b) Per-layer rank (inverse sharing strength) after learning for different held out domains.

Figure 3: Cross-domain similarity (a) and learned sharing strength by layer (b).

Undo-Bias is a binary classiﬁer (BC). We also implement a multi-class (MC) generalization. uDICA: A kernel based method learning a subspace to minimize the dissimilarity between domains [19]1. UML: Structural metric learning algorithm learn a low-bias distance metric for classiﬁcation tasks [7]. LRE-SVM: Exploits latent domains, and a nuclear-norm based regularizer on the likelihood matrix of exemplar-SVM [30]. 1HNN: 1 hidden layer neural network. MTAE-1HNN: 1HNN with multi-task auto encoder [10]. D-MTAE-1HNN: 1HNN with de-noising multi-task auto encoder [10]. DSN: The domain separation network learns speciﬁc and shared models for the source and target domains [2]. We re-purpose the original DSN from the domain adaptation to the DG task. Note that DSN is already shown to outperform the related [9].

4.3.2 VLCS Benchmark

Classic Benchmark - Binary Classiﬁcation with Shallow Features Since our approach to extracting a domain invariant model is related to the intuition in Undo Bias [12], we ﬁrst evaluate our methodology by performing a direct comparison against Undo Bias. We use the same 5376 di-

1Like [10], we found sDICA to be worse than uDICA, so excluded it.

mensional VLCS SIFT-BOW features2 from [12], and compare Our-MLP using one RELU hidden layer with 4096 neurons. For direct comparison, we apply Our-MLP in a 1-vs-All manner as per Undo-Bias. The results in Table 1 show that without exploiting the beneﬁt of end-to-end learning, our approach still performs favorably compared to Undo Bias. This is due to (i) our low-rank modeling of domain-speciﬁc and domain-agnostic knowledge, and (ii) the generalization of doing so in a multi-layer network.

Multi-class recognition with Deep Learning In this experiment we continue to analyze the VLCS benchmark, but from a multiclass classiﬁcation perspective. We compare existing DG methods (Undo-Bias [12], UML [7], LRE-SVM [30], uDICA [19], MTAE+1HNN [10], DMTAE+1HNN[10])againstbaselines(1HNN,SVM,Deep) and our methods Ours-MLP/Ours-Full. For the other methods besides Deep-All and Ours-Full, we follow [10] and use pre-extracted DECAF6 features3 [4]. For Deep and OursFull, we ﬁne-tune the CNN on the source domains.

From the results in Table 2, we make the following ob-

2http://undoingbias.csail.mit.edu/ 3http://www.cs.dartmouth.edu/˜chenfang/proj_

page/FXR_iccv13/index.php

VLCSPACS00.20.40.60.810.070.85CaltechLabelMePacalSUNArt paintingCartoonPhotoSketchPACSAvg020406080100AccuracyPACSWithinAcrossVLCSAvg020406080100AccuracyVLCSWithinAcross1234Avg051015202530Margin Within-AcrossCross-domain accuracy lossPACSVLCSConv1Conv2Conv3Conv4Conv5FC6FC7FC80123RankSharing Strength by LayerSketchCartoonArtPhotoAvgUnseen domain

Caltech LabelMe Pascal Sun Mean AP %

Chair Undo bias Ours-MLP Undo bias Ours-MLP Undo bias Ours-MLP Undo bias Ours-MLP Undo bias Ours-MLP

Person

Bird

Dog

Car

12.08 33.08 15.42 0.59 15.29

10.89 28.35 13.63 2.01 13.72

63.80 69.22 37.49 70.62 60.28

61.29 74.07 42.81 71.32 62.37

7.54 5.34 30.05 37.44 20.09

11.26 3.68 32.71 37.50 21.29

5.24 1.66 14.97 1.12 5.75

3.90 2.06 15.93 1.89 5.94

50.81 64.85 58.47 42.20 54.08

48.48 67.00 63.61 42.71 55.45

Table 1: Comparison against Undo-Bias [12] on the VLCS benchmark using classic SIFT-BOW features, and our shallow model Ours-MLP. Average precision (%) and mean average precision (%) of binary 1-v-all classiﬁcation in unseen domains.

Unseen domain

Caltech LabelMe Pascal Sun Ave.%

SVM 1HNN Undo-Bias[12] 77.67 52.49 58.86 49.09 59.93

86.67 58.20 59.10 57.86 65.46

87.50 58.09 54.29 54.21 63.52

Image (cid:55)→ Deep Feature (cid:55)→ Classiﬁer

Image (cid:55)→ E2E

uDICA[19] UML[7] LRE-SVM[30] MTAE+1HNN[10] D-MTAE+1HNN[10] Ours-MLP Deep-All Ours-Full

61.70 46.67 44.41 38.56 47.83

91.13 58.50 56.26 58.49 65.85

88.11 59.74 60.58 54.88 65.83

90.71 59.24 61.09 60.20 67.81

89.05 60.13 63.90 61.33 68.60

92.43 58.74 65.58 61.85 69.65

93.40 62.11 68.41 64.16 72.02

93.63 63.49 69.99 61.32 72.11

Table 2: Comparison of features and state of the art on the VLCS benchmark. Multi-class accuracy (%).

servations: (i) Given the ﬁxed DECAF6 feature, most prior DG methods improve on vanilla SVM, and D-MTAE [10] is the best of these. (ii) Ours-MLP outperforms 1HNN, which uses the same type of architecture and the same feature. This margin is due to our low-rank domain-generalization approach. (iii) The very simple baseline of ﬁne-tuning a deep model on the aggregation of source domains (DeepAll) performs surprisingly well and actually outperforms all thepriorDGmethods. (iii)Ours-FulloutperformsDeep-All slightly. This small margin is understandable. Our model does have more parameters to learn than Deep-All, despite the low rank; and the cost of doing this is not justiﬁed by the relatively small domain gap between the VLCS datasets.

4.3.3 Our PACS benchmark

We compare baselines (SVM, 1HNN) and prior methods (LRE-SVM [30], D-MTAE+1HNN [10], uDICA [19]) using DECAF7 features against Deep-ALL, DSN [2] and Ours-Full using end-to-end learning. From the results in Table 3 we make the observations: (i) uDICA and D-MTAE1HNN are the best prior DG models, and DSN is also effective despite being designed for DA. While uDICA scores well overall, this is mostly due to very high performance on the photo domain. This is understandable as in that condition DICA uses unaltered DECAF7 features tuned for photo recognition. It is also the least useful direction for DG, as photos are already abundant. (ii) As for the VLCS benchmark, Deep-ALL again performs well. (iii) However OursFull performs best overall by combining the robustness of a CNN architecture with an explicit DG mechanism. Ablation Study: To investigate the contributions of each components in our framework, we compare the following variants: Tuning-Last: Trains on all sources followed by direct application to the target. But ﬁne-tunes the ﬁnal FC

layer only. 2HE-Last: Fine-tunes the ﬁnal FC layer, and uses our tensor weight generation (Eq. 3) based on 2-hot encoding for multidomain learning, before transferring the shared model component to the target. But without low rank factorisation. 2HE+Decomp-Last: Uses 2-hot encoding based weight synthesis, and low-rank decomposition of the ﬁnal layer (Eq. 3). Ours-Full: Uses 2-hot encoding and low-rank modeling on every layer in the CNN.

From the results, we can see that each component helps: (i) 2HE-Last outperforms Tuning-Last, demonstrating the ability of our tensor weight generator to synthesize domain agnostic models for a multiclass classiﬁer. (ii) 2HE+Decomp-Last outperforms 2HE-Last, demonstrating the value of our low-rank tensor modeling of the weight generator parameters. (iii) Ours-Full outperforms 2HE+Decomp-Last, demonstrating the value of performing these DG strategies at every layer of the network.

4.4. Further Analysis

Learned Layer-wise Sharing Strength An interesting property of our approach is that, unlike some other deep learning methods [9, 17] it does not require manual speciﬁ- cation of the cross-domain sharing structure at each layer of the CNN; and unlike Undo Bias [12] it can choose how to share more ﬂexibly through the rank choice at each layer. We can observe the estimated sharing structure at each layer by performing Tucker decomposition to factorize the tuned model under a speciﬁed reconstruction error threshold ((cid:15) = 0.001). The resulting domain-rank at each layer reveals the sharing strength. The rank per-layer for each held-out domain in PACS is shown in Fig. 3b. Here there are three training domains, so the maximum rank is 3 and the minimum rank is 1. Intuitively, the results show heavily shared Conv1-Conv3 layers, and low-sharing in FC6-FC8

Figure 4: Visualization of the preferred images of output neurons ‘horse’, ‘giraffe’ and ‘house’ in the domains of the PACS dataset. Left: real images. Middle: synthesized images for PACS domains. Right: synthesized images for agnostic domain.

Unseen domain

Art painting Cartoon Photo Sketch Ave.%

Image (cid:55)→ Deep Feature (cid:55)→ Classiﬁer

Image (cid:55)→ E2E

SVM 1HNN uDICA [19] LRE-SVM [30] D-MTAE+1HNN [10] Ours-MLP Deep-All DSN [2] Ours-Full 60.27 55.39 58.65 52.86 91.12 82.83 47.86 43.89 64.48 58.74

64.57 64.54 91.78 51.12 68.00

59.10 57.89 89.86 50.31 64.29

61.13 66.54 83.25 58.58 67.37

59.74 52.81 85.53 37.89 58.99

61.40 57.16 89.68 50.38 64.65

63.30 63.13 87.70 54.07 67.05

62.86 66.97 89.50 57.51 69.21

Table 3: Evaluation % of classiﬁcation on PACS. Multi-class accuracy (%).

Unseen domain

Art painting Cartoon Photo Sketch Ave.%

Ablation Study

Tuning-Last 59.79 56.22 86.79 46.41 62.30

2HE-Last 59.20 55.50 87.33 48.45 62.62

2HE+Decom-Last Ours-Full

62.71 52.69 88.84 52.16 64.10

62.86 66.97 89.50 57.51 69.21

Table 4: Ablation study. Multi-class accuracy (%).

parameterized (via the domain descriptor z) to one speciﬁc domain versus the abstract domain-agnostic factor. This visualization is imperfect because [21] is trained using a photo-domain, and most of our domains are nonphotographic art. Nevertheless, from Fig. 4 the synthesis for Photo domain seem to be the most concrete, while the Sketch/Cartoon/Painting domains are more abstract.

layers. The middle layers Conv4 and Conv5 have different sharing strength according to which domains provide the source set. For example, in Conv 5, when Sketch is unseen, the other domains are relatively similar so can have greater sharing, compared to when Sketch is included as a seen domain. This is intuitive as Sketch is the most different from the other three domains. This ﬂexible ability to determine sharing strength is a key property of our model.

Visualization To visualize the preferences of our multidomain network, we apply the DGN-AM [21] method to synthesize the preferred input images for our model when

5. Conclusion

We presented a new dataset and deep learning-based method for domain generalization. Our PACS (Photo-ArtCartoon-Sketch) dataset is aligned with a practical application of domain generalization, and we showed it has more challenging domain shift than prior datasets, making it suitable to drive the ﬁeld in future. Our new domain generalization method integrates the idea of learning a domainagnostic classiﬁer with a robust deep learning approach for end-to-end learning of domain generalization. The result performs comparably or better than prior approaches.

Real imagePhoto AgnosticArt painting CartoonSketchhorsegiraffehouseReferences

[1] L. Bertinetto, J. F. Henriques, J. Valmadre, P. H. S. Torr, and A. Vedaldi. Learning feed-forward one-shot learners. In NIPS, 2016.

[2] K. Bousmalis, G. Trigeorgis, N. Silberman, D. Krishnan, and D. Erhan. Domain separation networks. In NIPS, 2016. [3] E. J. Crowley, O. M. Parkhi, and A. Zisserman. Face paint-

ing: querying art with photos. In BMVC, 2015.

[4] J. Donahue, Y. Jia, O. Vinyals, J. Hoffman, N. Zhang, E. Tzeng, and T. Darrell. Decaf: A deep convolutional activation feature for generic visual recognition. In ICML, 2014. [5] A. Z. E. J. Crowley. The art of detection. In ECCV Workshop

on Computer Vision for Art Analysis, 2016.

[6] M. Eitz, J. Hays, and M. Alexa. How do humans sketch

objects? TOG, 2012.

[7] C. Fang, Y. Xu, and D. N. Rockmore. Unbiased metric learning: On the utilization of multiple datasets and web images for softening bias. In ICCV, 2013.

[8] C. Finn, P. Abbeel, and S. Levine. Model-agnostic metaIn ICML,

learning for fast adaptation of deep networks. 2017.

[9] Y.GaninandV.Lempitsky. Unsuperviseddomainadaptation

by backpropagation. In ICML, 2015.

[10] M. Ghifary, W. Bastiaan Kleijn, M. Zhang, and D. Balduzzi. Domain generalization for object recognition with multi-task autoencoders. In ICCV, 2015.

[11] B. Gong, Y. Shi, F. Sha, and K. Grauman. Geodesic ﬂow kernel for unsupervised domain adaptation. In CVPR, 2012. [12] A. Khosla, T. Zhou, T. Malisiewicz, A. Efros, and A. Torralba. Undoing the damage of dataset bias. In ECCV, 2012. [13] Y.-D. Kim, E. Park, S. Yoo, T. Choi, L. Yang, and D. Shin. Compression of deep convolutional neural networks for fast and low power mobile applications. In ICLR, 2016.

[24] P. Sangkloy, N. Burnell, C. Ham, and J. Hays. The sketchy database: learning to retrieve badly drawn bunnies. TOG, 2016.

[25] O. Sigaud, C. Masson, D. Filliat, and F. Stulp. Gated net-

works: an inventory. arXiv, 2015.

[26] J. Song, Y. Qian, Y.-Z. Song, T. Xiang, and T. Hospedales. Deep spatial-semantic attention for ﬁne-grained sketchbased image retrieval. In ICCV, 2017.

[27] A. Torralba and A. A. Efros. Unbiased look at dataset bias.

In CVPR, 2011.

[28] L. R. Tucker. Some mathematical notes on three-mode factor

analysis. Psychometrika, 1966.

[29] Q. Wu, H. Cai, and P. Hall. Learning graphs to model visual objects across different depictive styles. In ECCV. 2014. [30] Z. Xu, W. Li, L. Niu, and D. Xu. Exploiting low-rank structure from latent domains for domain generalization. In ECCV, 2014.

[31] Y. Yang and T. M. Hospedales. Deep multi-task represenIn ICLR,

tation learning: A tensor factorisation approach. 2017.

[32] J. Yosinski, J. Clune, Y. Bengio, and H. Lipson. How transferable are features in deep neural networks? In NIPS, 2014. [33] Q. Yu, F. Liu, Y.-Z. Song, T. Xiang, T. M. Hospedales, and

C. C. Loy. Sketch me that shoe. In CVPR, 2016.

[34] Q. Yu, Y. Yang, F. Liu, Y.-Z. Song, T. Xiang, and T. M. Hospedales. Sketch-a-net: A deep neural network that beats humans. In IJCV, 2017.

[14] A. Krizhevsky, I. Sutskever, and G. E. Hinton.

classiﬁcation with deep convolutional neural networks. NIPS, 2012.

Imagenet In

[15] L. D. Lathauwer, B. D. Moor, and J. Vandewalle. A multi-

linear singular value decomposition. SIMAX, 2000.

[16] V.Lebedev, Y.Ganin, M.Rakhuba, I.Oseledets, andV.Lempitsky. Speeding-up convolutional neural networks using ﬁne-tuned cp-decomposition. In ICLR, 2015.

[17] M. Long, Y. Cao, J. Wang, and M. I. Jordan. Learning transIn ICML,

ferable features with deep adaptation networks. 2015.

[18] L. v. d. Maaten and G. Hinton. Visualizing data using t-sne.

JMLR, 2008.

[19] K. Muandet, D. Balduzzi, and B. Scholkopf. Domain generalization via invariant feature representation. In ICML, 2013.

[20] T. Munkhdalai and H. Yu. Meta networks. In ICML, 2017. [21] A. M. Nguyen, A. Dosovitskiy, J. Yosinski, T. Brox, and J. Clune. Synthesizing the preferred inputs for neurons in neural networks via deep generator networks. In NIPS, 2016. [22] S. Ravi and H. Larochelle. Optimization as a model for few-

shot learning. In ICLR, 2017.

[23] K. Saenko, B. Kulis, M. Fritz, and T. Darrell. Adapting visual category models to new domains. In ECCV, 2010.

