{
    "title_author_abstract_introduction": "Character-level Convolutional Networks for Text Classiﬁcation∗\nXiang Zhang\nJunbo Zhao Courant Institute of Mathematical Sciences, New York University 719 Broadway, 12th Floor, New York, NY 10003 {xiang, junbo.zhao, yann}@cs.nyu.edu\nYann LeCun\nAbstract\nThis article offers an empirical exploration on the use of character-level convolutional networks (ConvNets) for text classiﬁcation. We constructed several largescale datasets to show that character-level convolutional networks could achieve state-of-the-art or competitive results. Comparisons are offered against traditional models such as bag of words, n-grams and their TFIDF variants, and deep learning models such as word-based ConvNets and recurrent neural networks.\nIntroduction\nText classiﬁcation is a classic topic for natural language processing, in which one needs to assign predeﬁned categories to free-text documents. The range of text classiﬁcation research goes from designing the best features to choosing the best possible machine learning classiﬁers. To date, almost all techniques of text classiﬁcation are based on words, in which simple statistics of some ordered word combinations (such as n-grams) usually perform the best [12].\nOn the other hand, many researchers have found convolutional networks (ConvNets) [17] [18] are useful in extracting information from raw signals, ranging from computer vision applications to speech recognition and others. In particular, time-delay networks used in the early days of deep learning research are essentially convolutional networks that model sequential data [1] [31].\nIn this article we explore treating text as a kind of raw signal at character level, and applying temporal (one-dimensional) ConvNets to it. For this article we only used a classiﬁcation task as a way to exemplify ConvNets’ ability to understand texts. Historically we know that ConvNets usually require large-scale datasets to work, therefore we also build several of them. An extensive set of comparisons is offered with traditional models and other deep learning models.\nApplying convolutional networks to text classiﬁcation or natural language processing at large was explored in literature. It has been shown that ConvNets can be directly applied to distributed [6] [16] or discrete [13] embedding of words, without any knowledge on the syntactic or semantic structures of a language. These approaches have been proven to be competitive to traditional models.\nThere are also related works that use character-level features for language processing. These include using character-level n-grams with linear classiﬁers [15], and incorporating character-level features to ConvNets [28] [29]. In particular, these ConvNet approaches use words as a basis, in which character-level features extracted at word [28] or word n-gram [29] level form a distributed representation. Improvements for part-of-speech tagging and information retrieval were observed.\nThis article is the ﬁrst to apply ConvNets only on characters. We show that when trained on largescale datasets, deep ConvNets do not require the knowledge of words, in addition to the conclusion\n∗An early version of this work entitled “Text Understanding from Scratch” was posted in Feb 2015 as arXiv:1502.01710. The present paper has considerably more experimental results and a rewritten introduction.\nfrom previous research that ConvNets do not require the knowledge about the syntactic or semantic structure of a language. This simpliﬁcation of engineering could be crucial for a single system that can work for different languages, since characters always constitute a necessary construct regardless of whether segmentation into words is possible. Working on only characters also has the advantage that abnormal character combinations such as misspellings and emoticons may be naturally learnt.",
    "data_related_paragraphs": [
        "The non-linearity used in our model is the rectiﬁer or thresholding function h(x) = max{0,x}, which makes our convolutional layers similar to rectiﬁed linear units (ReLUs) [24]. The algorithm used is stochastic gradient descent (SGD) with a minibatch of size 128, using momentum [26] [30] 0.9 and initial step size 0.01 which is halved every 3 epoches for 10 times. Each epoch takes a ﬁxed number of random training samples uniformly sampled across classes. This number will later be detailed for each dataset sparately. The implementation is done using Torch 7 [4].",
        "2.4 Data Augmentation using Thesaurus",
        "Many researchers have found that appropriate data augmentation techniques are useful for controlling generalization error for deep learning models. These techniques usually work well when we could ﬁnd appropriate invariance properties that the model should possess. In terms of texts, it is not reasonable to augment the data using signal transformations as done in image or speech recognition, because the exact order of characters may form rigorous syntactic and semantic meaning. Therefore,",
        "Some TextConvolutionsMax-poolingLengthFeatureQuantization...Conv. and Pool. layersFully-connected\fthe best way to do data augmentation would have been using human rephrases of sentences, but this is unrealistic and expensive due the large volume of samples in our datasets. As a result, the most natural choice in data augmentation for us is to replace words or phrases with their synonyms.",
        "We experimented data augmentation by using an English thesaurus, which is obtained from the mytheas component used in LibreOfﬁce1 project. That thesaurus in turn was obtained from WordNet [7], where every synonym to a word or phrase is ranked by the semantic closeness to the most frequently seen meaning. To decide on how many words to replace, we extract all replaceable words from the given text and randomly choose r of them to be replaced. The probability of number r is determined by a geometric distribution with parameter p in which P[r] ∼ pr. The index s of the synonym chosen given a word is also determined by a another geometric distribution in which P[s] ∼ qs. This way, the probability of a synonym chosen becomes smaller when it moves distant from the most frequently seen meaning. We will report the results using this new data augmentation technique with p = 0.5 and q = 0.5.",
        "Bag-of-words and its TFIDF. For each dataset, the bag-of-words model is constructed by selecting 50,000 most frequent words from the training subset. For the normal bag-of-words, we use the counts of each word as the features. For the TFIDF (term-frequency inverse-document-frequency) [14] version, we use the counts as the term-frequency. The inverse document frequency is the logarithm of the division between total number of samples and number of samples with the word in the training subset. The features are normalized by dividing the largest feature value.",
        "Bag-of-ngramsanditsTFIDF.Thebag-of-ngramsmodelsareconstructedbyselectingthe500,000 most frequent n-grams (up to 5-grams) from the training subset for each dataset. The feature values are computed the same way as in the bag-of-words model.",
        "Bag-of-means on word embedding. We also have an experimental model that uses k-means on word2vec [23] learnt from the training subset of each dataset, and then use these learnt means as representatives of the clustered words. We take into consideration all the words that appeared more than 5 times in the training subset. The dimension of the embedding is 300. The bag-of-means features are computed the same way as in the bag-of-words model. The number of means is 5000.",
        "Word-based ConvNets. Among the large number of recent works on word-based ConvNets for text classiﬁcation, one of the differences is the choice of using pretrained or end-to-end learned word representations. Weoffercomparisonswithbothusingthepretrainedword2vec[23]embedding[16] and using lookup tables [5]. The embedding size is 300 in both cases, in the same way as our bagof-means model. To ensure fair comparison, the models for each case are of the same size as our character-level ConvNets, in terms of both the number of layers and each layer’s output size. Experiments using a thesaurus for data augmentation are also conducted.",
        "4 Large-scale Datasets and Results",
        "Previous research on ConvNets in different areas has shown that they usually work well with largescale datasets, especially when the model takes in low-level raw features like characters in our case. However, most open datasets for text classiﬁcation are quite small, and large-scale datasets are splitted with a signiﬁcantly smaller training set than testing [21]. Therefore, instead of confusing our community more by using them, we built several large-scale datasets for our experiments, ranging from hundreds of thousands to several millions of samples. Table 3 is a summary.",
        "Table 3: Statistics of our large-scale datasets. Epoch size is the number of minibatches in one epoch",
        "Dataset AG’s News Sogou News DBPedia Yelp Review Polarity Yelp Review Full Yahoo! Answers Amazon Review Full Amazon Review Polarity",
        "AG’s news corpus. We obtained the AG’s corpus of news article on the web2. It contains 496,835 categorized news articles from more than 2000 news sources. We choose the 4 largest classes from thiscorpustoconstructourdataset, usingonlythetitleanddescriptionﬁelds. Thenumberoftraining samples for each class is 30,000 and testing 1900.",
        "Sogounewscorpus. ThisdatasetisacombinationoftheSogouCAandSogouCSnewscorpora[32], containing in total 2,909,551 news articles in various topic channels. We then labeled each piece of news using its URL, by manually classifying the their domain names. This gives us a large corpus of news articles labeled with their categories. There are a large number categories but most of them contain only few articles. We choose 5 categories – “sports”, “ﬁnance”, “entertainment”, “automobile” and “technology”. The number of training samples selected for each class is 90,000 and testing 12,000. Although this is a dataset in Chinese, we used pypinyin package combined with jieba Chinese segmentation system to produce Pinyin – a phonetic romanization of Chinese. The models for English can then be applied to this dataset without change. The ﬁelds used are title and content.",
        "DBPedia ontology dataset. DBpedia is a crowd-sourced community effort to extract structured information from Wikipedia [19]. The DBpedia ontology dataset is constructed by picking 14 nonoverlapping classes from DBpedia 2014. From each of these 14 ontology classes, we randomly choose 40,000 training samples and 5,000 testing samples. The ﬁelds we used for this dataset contain title and abstract of each Wikipedia article.",
        "Yelp reviews. The Yelp reviews dataset is obtained from the Yelp Dataset Challenge in 2015. This dataset contains 1,569,264 samples that have review texts. Two classiﬁcation tasks are constructed from this dataset – one predicting full number of stars the user has given, and the other predicting a polarity label by considering stars 1 and 2 negative, and 3 and 4 positive. The full dataset has 130,000 training samples and 10,000 testing samples in each star, and the polarity dataset has 280,000 training samples and 19,000 test samples in each polarity.",
        "Yahoo! Answers dataset. We obtained Yahoo! Answers Comprehensive Questions and Answers version1.0datasetthroughtheYahoo! Webscopeprogram. Thecorpuscontains4,483,032questions and their answers. We constructed a topic classiﬁcation dataset from this corpus using 10 largest main categories. Each class contains 140,000 training samples and 5,000 testing samples. The ﬁelds we used include question title, question content and best answer.",
        "Amazon reviews. We obtained an Amazon review dataset from the Stanford Network Analysis Project (SNAP), which spans 18 years with 34,686,770 reviews from 6,643,669 users on 2,441,053 products [22]. Similarly to the Yelp review dataset, we also constructed 2 datasets – one full score prediction and another polarity prediction. The full dataset contains 600,000 training samples and 130,000 testing samples in each class, whereas the polarity dataset contains 1,800,000 training samples and 200,000 testing samples in each polarity sentiment. The ﬁelds used are review title and review content.",
        "Table 4 lists all the testing errors we obtained from these datasets for all the applicable models. Note that since we do not have a Chinese thesaurus, the Sogou News dataset does not have any results using thesaurus augmentation. We labeled the best result in blue and worse result in red.",
        "Character-level ConvNet is an effective method. The most important conclusion from our experiments is that character-level ConvNets could work for text classiﬁcation without the need for words. This is a strong indication that language could also be thought of as a signal no different from any other kind. Figure 4 shows 12 random ﬁrst-layer patches learnt by one of our character-level ConvNets for DBPedia dataset.",
        "Dataset size forms a dichotomy between traditional and ConvNets models. The most obvious trend coming from all the plots in ﬁgure 3 is that the larger datasets tend to perform better. Traditional methods like n-grams TFIDF remain strong candidates for dataset of size up to several hundreds of thousands, and only until the dataset goes to the scale of several millions do we observe that character-level ConvNets start to do better.",
        "ConvNets may work well for user-generated data. User-generated data vary in the degree of how well the texts are curated. For example, in our million scale datasets, Amazon reviews tend to be raw user-inputs, whereas users might be extra careful in their writings on Yahoo! Answers. Plots comparingword-baseddeepmodels(ﬁgures3c, 3dand3e) showthatcharacter-levelConvNetswork better for less curated user-generated texts. This property suggests that ConvNets may have better applicability to real-world scenarios. However, further analysis is needed to validate the hypothesis that ConvNets are truly good at identifying exotic character combinations such as misspellings and emoticons, as our experiments alone do not show any explicit evidence.",
        "Choice of alphabet makes a difference. Figure 3f shows that changing the alphabet by distinguishing between uppercase and lowercase letters could make a difference. For million-scale datasets, it seems that not making such distinction usually works better. One possible explanation is that there is a regularization effect, but this is to be validated.",
        "0.00%10.00%20.00%30.00%40.00%50.00%60.00%70.00%80.00%90.00%-100.00%-80.00%-60.00%-40.00%-20.00%0.00%20.00%40.00%60.00%-15.00%-10.00%-5.00%0.00%5.00%10.00%15.00%20.00%25.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%-60.00%-50.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%-50.00%-40.00%-30.00%-20.00%-10.00%0.00%10.00%20.00%AG NewsDBPediaYelp P.Yelp F.Yahoo A.Amazon F.Amazon P.\fSemantics of tasks may not matter. Our datasets consist of two kinds of tasks: sentiment analysis (Yelp and Amazon reviews) and topic classiﬁcation (all others). This dichotomy in task semantics does not seem to play a role in deciding which method is better.",
        "There is no free lunch. Our experiments once again veriﬁes that there is not a single machine learning model that can work for all kinds of datasets. The factors discussed in this section could all play a role in deciding which method is the best for some speciﬁc application.",
        "This article offers an empirical study on character-level convolutional networks for text classiﬁcation. We compared with a large number of traditional and deep learning models using several largescale datasets. On one hand, analysis shows that character-level ConvNet is an effective method. On the other hand, how well our model performs in comparisons depends on many factors, such as dataset size, whether the texts are curated and choice of alphabet."
    ]
}