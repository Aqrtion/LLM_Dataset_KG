{
    "title_author_abstract_introduction": "Deep Hashing Network for Unsupervised Domain Adaptation\nHemanth Venkateswara, Jose Eusebio, Shayok Chakraborty, Sethuraman Panchanathan Center for Cognitive Ubiquitous Computing, Arizona State University, Tempe, AZ, USA {hemanthv, jeusebio, shayok.chakraborty, panch}@asu.edu\nAbstract\nIn recent years, deep neural networks have emerged as a dominant machine learning tool for a wide variety of application domains. However, training a deep neural network requires a large amount of labeled data, which is an expensive process in terms of time, labor and human expertise. Domainadaptationor transfer learning algorithms address this challenge by leveraging labeled data in a different, but related source domain, to develop a model for the target domain. Further, the explosive growth of digital data has posed a fundamental challenge concerning its storage and retrieval. Due to its storage and retrieval efﬁciency, recent years have witnessed a wide application of hashing in a variety of computer vision applications. In this paper, we ﬁrst introduce a new dataset, Ofﬁce-Home, to evaluate domain adaptation algorithms. The dataset contains images of a variety of everyday objects from multiple domains. We then propose a novel deep learning framework that can exploit labeled source data and unlabeled target data to learn informative hash codes, to accurately classify unseen target data. To the best of our knowledge, this is the ﬁrst research effort to exploit the feature learning capabilities of deep neural networks to learn representative hash codes to address the domain adaptation problem. Our extensive empirical studies on multiple transfer tasks corroborate the usefulness of the framework in learning efﬁcient hash codes which outperform existing competitive baselines for unsupervised domain adaptation.\n1. Introduction\nDeep learning algorithms automatically learn a discriminating set of features and have depicted commendable performance in a variety of computer vision applications. Unfortunately, training a deep model necessitates a large volume of labeled data, which can be time consuming and expensive to acquire. However, labeled data from a different, but related domain is often available, which has motivated the development of algorithms which can leverage\nlabeled data in a source domain to developa machine learning model for the target domain. Learning a discriminative model in the presence of the shift between training and test distributions is known as transfer learning or domain adaptation [17]. Unsupervised domain adaptation is a challenging setting, where labeled data is available only in the source domain; no labeled data is available in the target domain. Conventional shallow transfer learning methods develop their models in two stages, feature extraction followed by domain adaptation. The features are ﬁxed and then a model is trained to align the source and target domains [16, 20, 33, 38, 42, 43, 44]. On the other hand, deep transfer learning procedures exploit the feature learning capabilities of deep networks to learn transferablefeature representations for domain adaptation and have demonstrated impressive empirical performance [17, 18, 31, 34, 46].\nThe explosive growth of digital data in the modern era has posed fundamental challenges regarding their storage, retrieval and computational requirements. Against this backdrop, hashing has emerged as one of the most popular and effective techniques due to its fast query speed and low memory cost [48]. Hashing techniques transform high dimensional data into compact binary codes and generate similar binary codes for similar data items. Motivated by this fact, we propose to train a deep neural network to output binary hash codes (instead of probabilityvalues), which can be used for classiﬁcation. We see two advantages to estimating a hash value instead of a standard probability vector in the ﬁnal layer of the network: (i) the hash values are used to develop a unique loss function for target data in the absence of labels and (ii) during prediction, the hash value of a test sample can be compared against the hash values of the training samples to arrive at a more robust category prediction.\nIn this paper, we ﬁrst introduce a new dataset, OfﬁceHome, which we use to evaluate our algorithm. The OfﬁceHome dataset is an object recognition dataset which contains images from 4 domains. It has around 15,500 images organized into 65 categories. We further propose a novel deep learning framework called Domain Adaptive Hash-\ning (DAH) to learn informative hash codes to address the problem of unsupervised domain adaptation. We propose a unique loss function to train the deep network with the following components: (i) supervised hash loss for labeled source data, which ensures that source samples belonging to the same class have similar hash codes; (ii) unsupervised entropy loss for unlabeled target data, which imposes each target sample to align closely with exactly one of the source categories and be distinct from the other categories and (iii) a loss based on multi-kernel Maximum Mean Discrepancy (MK-MMD), which seeks to learn transferable features within the layers of the network to minimize the distribution difference between the source and target domains. Figure 1 illustrates the different layers of the DAH and the components of the loss function.",
    "data_related_paragraphs": [
        "There have been many approaches to address the problem of domain-shift in unsupervised domain adaptation. One straightforward approach is, to modify a classiﬁer trained for the source data by adapting it to classify target data [1, 4] or learn a transformationmatrix to linearly transform the source data, so that it is aligned with the target [27, 42]. Some other procedures re-weight the data points in the source domain, to select source data that is similar to the target, when training a domain adaptive classiﬁer, [9, 10, 19]. A standardprocedureto reducedomaindiscrepancy is, to project the source and target data to a common subspace, thereby aligning their principal axes [16, 44]. Reducing domain disparity through nonlinear alignment of data has been possible with Maximum Mean Discrepancy (MMD) - a measure that provides the distribution difference between two datasets in a reproducing-kernel Hilbert space [13]. Kernel-PCA based methods apply the MMD to achieve nonlinear alignment of domains [32, 33, 38]. Manifold based approaches are also popular in domain adaptation for computervision, where the subspace of a domain is treated as a point on the manifold and transformations are learned to align two domains [20, 23]. A survey of popular domain adaptation techniques for computer vision is provided in [41] and a more generic survey of transfer learning approaches can be found in [39].",
        "All of the above techniques can be termed as shallow learningprocedures,since the models arelearnedusing predetermined features. In recent years deep learning has become very successful at learning highly discriminative features for computer vision applications [8]. Deep learning systems like deep CNNs learn representations of data that capture underlying factors of variation between different tasks in a multi-tasktransfer learningsetting [3]. These representations also disentangle the factors of variation allowingforthetransferofknowledgebetweentasks [12, 18, 37]. Yosinski et al. [49] demonstrated how the lower layers of a",
        "Unsupervised hashing techniques have been developed to extract unique hash codes for efﬁcient storage and retrieval of data [22, 25]. Neural network based hashing has led the way in state-of-the-art unsupervised hashing techniques [7, 11, 14]. The closest work incorporating hashing and adaptation appears in cross-modal hashing, where deep hashing techniques embed multi-modal data and learn hash codes for two related domains, like text and images [5, 6, 29]. However, these algorithms are not unsupervised and they are mainly applied to extract common hash codes for multi-modal data for retrieval purposes. To the best of our knowledge, there has been no work in unsupervised domain adaptation using deep hashing networks. We now present the Domain Adaptive Hashing (DAH) network for unsupervised domain adaptation through deep hashing.",
        "In unsupervised domain adaptation, we consider data from two domains; source and target. The source consists i,ys of labeled data, Ds = {xs i=1 and the target has only i}nt i=1. The data points x∗ unlabeleddata Dt = {xt i belongto X, where X is some input space. The corresponding labels are representedby y∗ i ∈ Y := {1,...,C}. The paradigmof domainadaptivelearningattemptstoaddresstheproblemof domain-shift in the data, where the data distributions of the source and target are different, i.e. Ps(X,Y ) 6= Pt(X,Y ). The domain-shift notwithstanding, our goal is to train a deep neural network classiﬁer ψ(.), that can predict the labels {ˆyt",
        "i=1, for the target data.",
        "We implement the neural network as a deep CNN which consists of 5 convolution layers conv1 - conv5 and 3 fully connected layers fc6 - fc8 followed by a loss layer. In our model, we introduce a hashing layer hash-fc8 in place of the standard fc8 layer to learn a binary code hi, for every data point xi, where hi ∈ {−1,+1}d. The hash-fc8 layer is driven by two loss functions, (i) supervised hash loss for the source data, (ii) unsupervised entropy loss for the target data. The supervised hash loss ensures hash values that are distinct and discriminatory, i.e. if xi and xj belong to the same category, their hash values hi and hj are similar and different otherwise. The unsupervised entropy loss aligns the target hash values with source hash values based on the similarity of their feature representations. The output of the",
        "(cid:12) (cid:12) The characteristic kernel k(.), is determined as a convex (cid:12) combination of κ PSD kernels, {km}κ m=1, K := k : k = κ . We set m=1 βm = 1,βm ≥ 0,∀m (cid:8) βm = 1/κ according to [34] and it works well in practice. P 3.2. Supervised Hashing for Source Data",
        "1+e−x is the sigmoid function. As the where, σ(x) = dot product hhi,hji increases, the probability of p(sij = 1|hi,hj) also increases, i.e., xi and xj belong to the same category. As the dot product decreases, the probability p(sij = 1|hi,hj) also decreases, i.e., xi and xj belong to different categories. We construct the (ns × ns) similarity matrix S = {sij}, for the source data with the provided labels, where sij = 1 if xi and xj belong to the same category and 0, otherwise. Let H = {hi}ns i=1 be the set of source data hash values. If the elements of H are assumed to be i.i.d., the negative log likelihood of the similarity matrix S given H can be written as,",
        "By minimizing Equation (4), we can determine hash values H for the source data which are consistent with the",
        "Figure 1: The Domain Adaptive Hash (DAH) network that outputs hash codes for the source and the target. The network is trained with a batch of source and target data. The convolution layers conv1 - conv5 and the fully connected layers fc6 and fc7 are ﬁne tuned from the VGG-F network. The MK-MMD loss trains the DAH to learn feature representations which align the source and the target. The hash-fc8 layer is trained to output vectors of d dimensions. The supervised hash loss drives the DAH to estimate a unique hash value for each object category. The unsupervised entropy loss aligns the target hash values to their corresponding source categories. Best viewed in color. network is represented as ψ(x), where ψ(x) ∈ Rd, which we convert to a hash code h = sgn(ψ(x)), where sgn(.) is the sign function. Once the network has been trained, the probability of x being assigned a label y is given by f(x) = p(y|h). We train the network using Ds and Dt and predict the target data labels ˆyt",
        "where, U i=1 are the set of output representations for the source and target data at",
        "3.3. Unsupervised Hashing for Target Data",
        "In the absence of target data labels, we use the similarity measure hui,uji, to guide the network to learn discriminative hash values for the target data. An ideal target output ut i, needs to be similar to many of the source outputs from the jth category . We assume without loss of generality,K sourcedata points foreverycategoryj where, (cid:1) j ∈ {1,...,C} and usj k is the kth source output from category j. In addition, ut i must be dissimilar to most other sourceoutputsusl k belongingtoa differentcategory(j 6= l). Enforcing similarity with all the K data points makes for a more robust target data category assignment. We outline a probability measure to capture this intuition. Let pij be the probability that input target data point xi is assigned to category j where,",
        "The exp(.) has been introduced for ease of differentiabilj pij = 1. When the ity and the denominator ensures target data point output is similar to one category only and dissimilar to all the other categories, the probability vector pi = [pi1,...,piC]T tends to be a one-hot vector. A one-hot vector can be viewed as a low entropy realization of pi. We can therefore envisage all the pi to be one-hot vectors (low entropy probability vectors), where the target data point outputs are similar to source data point outputs in one and only one category. To this end we introduce a loss",
        "Minimizing the entropy loss gives us probability vectors pi that tend to be one-hot vectors, i.e., the target data point outputs are similar to source data point outputs from any one category only. Enforcing similarity with K source data points from a category, guarantees that the hash values are determinedbased on a commonsimilarity between multiple source category data points and the target data point.",
        "where, U := {Us ∪ Ut} and (γ, η) control the importance of domain adaptation (1) and target entropy loss (7) respectively. The hash values H are obtained from the output of the network using H = sgn(U). The loss terms (5) and (7) are determined in the ﬁnal layer of the network with the network output U. The MK-MMD loss (1) is determined l l between layer outputs {U t} at each of the fully cons, U nected layers F = {fc6,fc7,fc8}, where we adopt the linear time estimate for the unbiased MK-MMD as described in [24] and [31]. The DAH is trained using standard backpropagation. The detailed derivation of the derivative of (8) w.r.t. U is provided in the supplementary material. Network Architecture: Owing to the paucity of images in a domain adaptation setting, we circumvent the need to train a deep CNN with millions of images by adapting the pre-trained VGG-F [8] network to the DAH. The VGG-F has been trained on the ImageNet 2012 dataset and it consists of 5 convolution layers (conv1 - conv5) and 3 fully connected layers (fc6, fc7, fc8). We introduce the hashing layer hash-fc8 that outputs vectors in Rd in the place of fc8. To account for the hashing approximation, we introduced a tanh() layer. However, we encounter the issue of vanishing gradients [26] when using tanh() as it saturates with large inputs. We therefore preface the tanh() with a batch normalization layer which prevents the tanh() from saturating. In effect, hash-fc8 := {fc8 → batch-norm → tanh()}. The hash-fc8 providesgreater stability when ﬁne-tuningthe learning rates than the deep hashing networks [30, 50]. Figure 1 illustrates the proposed DAH network.",
        "Table 1: Statistics for the Ofﬁce-Home dataset. Min: # is the minimum number of images amongst all the categories, Min: Size and Max: Sizeare the minimum and maximum image sizes across all categories and Acc. is the classiﬁcation accuracy.",
        "4. The Ofﬁce-Home Dataset",
        "Supervised deep learning models require a large volume of labeled training data. Unfortunately, existing datasets for vision-based domain adaptation are limited in their size and are not suitable for validating deep learning algorithms. The standard datasets for vision based domain adaptation are, facial expression datasets CKPlus [35] and MMI [40], digitdatasets SVHN [36], USPSandMNIST[28], head pose recognition datasets PIE [33], object recognition datasets COIL[33], Ofﬁce [42] and Ofﬁce-Caltech[20]. These datasets were created before deep-learning became popularand are insufﬁcient for training and evaluating deep learningbased domainadaptationapproaches. For instance, theobject-recognitiondatasetOfﬁcehas4110imagesacross 31 categories and Ofﬁce-Caltechhas 2533images across 10 categories.",
        "We release the Ofﬁce-Home dataset for domain adaptation based object recognition, that can be used to evaluate deep learning algorithms for domain adaptation. The Ofﬁce-Home dataset consists of 4 domains, with each domain containing images from 65 categories of everyday objects and a total of around 15,500 images. The domains include, Art: artistic depictions of objects in the form of sketches, paintings, ornamentation,etc.; Clipart: collection of clipart images; Product: images of objects without a background, akin to the Amazon category in Ofﬁce dataset; Real-World: images of objects captured with a regular camera.",
        "Public domain images were downloaded from websites like www.deviantart.com and www.ﬂickr.com to create the Art and Real-World domains. Clipart images were gathered from multiple clipart websites. The Product domain images were exclusively collected from www.amazon.com using web-crawlers. The collected images were manually ﬁltered on the basis of quality, size and content. The dataset has an average of around 70 images per category and a maximum of 99 images in a category. The primary challenge in creating this dataset was acquiring sufﬁcient number of public domain images across all the 4 domains. Figure 2 depicts a sampling of 16 categories from the Ofﬁce-Home dataset and Table 1 outlines some meta data for the dataset. The Acc. column in the Table 1 refers to classiﬁcation accuracies using the LIBLINEAR SVM [15] classiﬁer (5-fold cross validation) with deep fea-",
        "tures extracted using the VGG-F network. The dataset is publicly available for research 1.",
        "5.1. Datasets",
        "Ofﬁce [42]: This is currently the most popular benchmark datasetforobjectrecognitioninthedomainadaptationcomputer vision community. The dataset consists of images of everydayobjectsin anofﬁceenvironment. It has3domains; Amazon (A), Dslr (D) and Webcam (W). The dataset has around 4,100 images with a majority of the images (2816 images) in the Amazon domain. We adopt the common evaluation protocol of different pairs of transfer tasks for this dataset [31, 34]. We consider 6 transfer tasks for all combinations of source and target pairs for the 3 domains. Ofﬁce-Home: We introduce this new dataset and evaluate it in a similar manner to the Ofﬁce dataset. We consider 12 transfer tasks for the Art (Ar), Clipart (Cl), Product (Pr)and Real-World(Rw) domainsforall combinations of source and target for the 4 domains. Considering all the differentpairs of transfer enables us to evaluate the inherent bias between the domains in a comprehensive manner [45].",
        "We implement the DAH using the MatConvnet framework [47]. Since we train a pre-trained VGG-F, we ﬁnetune the weights of conv1-conv5, fc6 and fc7. We set their learning rates to 1/10th the learning rate of hash-fc8. We vary the learning rate between 10−4 to 10−5 over 300 epochs with a momentum 0.9 and weight decay 5 × 10−4. We set K = 5 (number of samples from a category). Since we have 31 categories in the Ofﬁce dataset, we get a source batch size of 31 × 5 = 155. For the target batch, we randomly select 155 samples. The total batch size turns out to be 310. For the Ofﬁce-Home dataset, with K = 5 and 65 categories, we get a batch size of 650. We set d = 64 (hash code length) for all our experiments. Since there is imbalance in the number of like and unlike pairs in S, we set the values in similarity matrix Si,j ∈ {0,10}. Increasing the similarity weight of like-pairs improves the performance of DAH. For the entropy loss, we set η = 1. For the MKMMD loss, we follow the heuristics mentioned in [24], to",
        "1https://hemanthdv.github.io/officehome-dataset/",
        "Figure 2: Sample images from the Ofﬁce-Home dataset. The dataset consists of images of everyday objects organized into 4 domains; Art: paintings, sketches and/or artisticdepictions, Clipart: clipart images, Product: images without background and Real-World: regular images captured with a camera. The ﬁgure displays examples from 16 of the 65 categories.",
        "determine the parameters. We estimate γ, by validating a binary domain classiﬁer to distinguish between source and target data points and select γ which gives largest error on a validation set. For MMD, we use a Gaussian kernel with a bandwidth σ given by the median of the pairwise distances in the training data. To incorporate the multi-kernel, we vary the bandwidth σm ∈ [2−8σ,28σ] with a multiplicative factor of 2. We deﬁne the target classiﬁer f(xt i) = p(y|ht i) in terms of 6. The target data point is assigned to the class with the largest probability, with ˆyi = maxj(pij) using the hash codes for the source and the target.",
        "In this section, we study the performance of the DAH for unsupervised domain adaptation, where labeled data is available only in the source domain and no labeled data is available in the target domain. We compare the DAH with state-of-the-art domain adaptation methods: (i) Geodesic Flow Kernel (GFK) [20], (ii) Transfer Component Analysis (TCA) [38], (iii) Correlation Alignment (CORAL) [44] and (iv) Joint Distribution Adaptation (JDA) [33]. We also compare the DAH with state-of-the-art deep learning methods for domain adaptation: (v) Deep Adaptation Network (DAN) [31] and (vi) Domain Adversarial Neural Network (DANN) [17]. For all of the shallow learning methods, we extract and use deep features from the fc7 layer of the VGG-F network that was pre-trainedon the ImageNet 2012 dataset. We also evaluate the effect of the entropy loss on hashing for the DAH. The DAH-e is the DAH algorithm where η is set to zero, which implies that the target hash values are not driven to align with the source categories. We follow the standard protocol for unsupervised domain adaptation, where all the labeled source data and all the unlabeled target data is used for training. Results and Discussion: The results are reported for the target classiﬁcation in each of the transfer tasks in Tables 2 and 3, where accuracies denote the percentage of correctly",
        "Table2: Recognition accuracies (%) for domain adaptation experiments on the Ofﬁce dataset. {Amazon (A), Dslr (D), Webcam (W)}. A→W implies A is source and W is target.",
        "classiﬁed target data samples. We present results with hash length d = 64 bits. The DAH algorithm consistently outperformsthe baselines across all the domains for the OfﬁceHome dataset. However,DANN marginallysurpasses DAH for the Ofﬁce dataset, prompting us to reason that domain adversarial training is more effective than DAH when the categories are fewer in number. Since domain alignment is categoryagnostic, it is possible that the aligneddomainsare not classiﬁcation friendly in the presence of large number of categories. When the number of categories is large, as in Ofﬁce-Home, DAH does best at extracting transferable features to achieve higher accuracies. We also note that DAH delivers better performance than DAH-e; thus, minimizing the entropy on the target data through 7 aids in improved alignment of the source and target samples, which boosts the accuracy. Feature Analysis: We also study the feature representations of the penultimatelayer (fc7) outputsusing t-SNE embeddings as in [12]. Figure 3a depicts the A-distance between domain pairs using Deep (VGG-F), DAN and DAH [2] deﬁned A-distance as the features. Ben-David et al. distance between two domains that can be viewed as the discrepancy between two domains. Although it is difﬁcult to estimate its exact value, an approximate distance measure is given by 2(1 − 2ǫ), where ǫ is the generalization error for a binary classiﬁer trained to distinguish between the two domains. We used a LIBLINEAR SVM [15] clas-",
        "Table 3: Recognition accuracies (%) for domain adaptation experiments on the Ofﬁce-Home dataset. {Art (Ar), Clipart (Cl), Product (Pr), Real-World (Rw)}. Ar→Cl implies Ar is source and Cl is target.",
        "In this section, we study the performance of our algorithm to generate compact and efﬁcient hash codes from the data for classifying unseen test instances, when no labels are available. This problemhas beenaddressedin the literature, with promising empirical results [7, 11, 21]. However, in a real-world setting, labels may be available from a different, but related (source) domain; a strategy to utilize the labeled data from the source domain to learn representative hash codes for the target domain is therefore of immense practical importance. Our work is the ﬁrst to identify and address this problem. We consider the following scenarios to address this real-world challenge: (i) No labels are available for a given dataset and the hash codes need to be learned in a completely unsupervised manner. We evaluate against baseline unsupervised hashing methods (ITQ) [22] and (KMeans) [25] and also state-of-the-art methods for unsupervised hashing (BA) [7] and (BDNN) [11]. (ii) Labeled data is available from a different, but related source domain. A hashing model is trained on the labeled source data and is used to learn hash codes for the target data. We refer to this method as NoDA, as no domain adaptation is performed. We used the deep pairwise-supervised hashing (DPSH) algorithm [30] to train a deep network with the source data and applied the network to generate hash codes for the target data. (iii) Labeled data is available from a different, but related source domain and we use our DAH formulation to learn hash codes for the target domain by (iv) Labeled data is available reducing domain disparity.",
        "in the target domain. This method falls under supervised hashing (SuH) (as it uses labeled data in the target domain to learn hash codes in the same domain) and denotes the It is included to comupper bound on the performance. pare the performance of unsupervised hashing algorithms relative to the supervised algorithm. We used the DPSH algorithm [30] to train a deep network on the target data and used it to generate hash codes on a validation subset.",
        "Results and Discussion: We applied the precision-recall curves and the mean average precision (mAP) measures to evaluate the efﬁcacy of the hashing methods, similar to previous research [7, 11, 21]. The results are depicted in Figures 4 and 5 (precision-recall curves) and Table 4 (mAP values), where we present hashing with code length d = 64 bits. Hashing performance with d = 16 bits also follows a similar trend and is presented in the supplementary material. For the sake of brevity, we drop the results with Dslr as it is very similar to Webcam, with little domain difference. We note that the NoDA has the poorest performance due to domain mismatch. This demonstrates that domain disparity needs to be considered beforedeployinga hashing network to extract hash codes. The unsupervised hashing methods ITQ, KMeans, BA and BDNN perform slightly better compared to NoDA. The proposed DAH algorithm encompasses hash code learning and domain adaptation in a single integrated framework. It is thus able to leverage the labeled data in the source domain in a meaningful manner to learn efﬁcient hash codes for the target domain. This accounts for its improvedperformance,as is evident in Figures 4 and 5 and Table 4. The supervised hashing technique (SuH) uses labels from the target and therefore depicts the",
        "Figure 4: Precision-Recall curves @64 bits for the Ofﬁce-Home dataset. Comparison of hashing without domain adaptation (NoDA), shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep unsupervised hashing (BA, BDNN), unsupervised domain adaptive hashing (DAH) and supervised hashing (SuH). Best viewed in color.",
        "Figure 5: Precision-Recall curves @64 bits for the Ofﬁce dataset. Comparison of hashing without domain adaptation (NoDA), shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep unsupervised hashing (BA, BDNN), unsupervised domain adaptive hashing (DAH) and supervised hashing (SuH). Best viewed in color.",
        "best performance. The proposed DAH framework consistently delivers the best performance relative to SuH when compared with the other hashing procedures. This demonstrates the merit of our framework in learning representative hash codes by utilizing labeled data from a different domain. Such a framework will be immensely useful in a",
        "In this paper, we have proposed a novel domain adaptive hashing (DAH) framework which exploits the feature learning capabilities of deep neural networks to learn efﬁ- cient hash codes for unsupervised domain adaptation. The DAH framework solves two important practical problems: category assignment with weak supervision or insufﬁcient labels (through domain adaptation) and the estimation of hash codes in an unsupervised setting (hash codes for target data). Thus, two practical challenges are addressed through a single integrated framework. This research is the ﬁrst of its kind to integrate hash code learning with unsupervised domain adaptation. We also introduceda new dataset, Ofﬁce-Home, which can be used to further research in domain adaptation. Acknowledgements: This material is based upon work supported by the National Science Foundation (NSF) under Grant No:1116360. Any opinions, ﬁndings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reﬂect the views of the NSF.",
        "[9] R. Chattopadhyay, Q. Sun, W. Fan, I. Davidson, S. Panchanathan, and J. Ye. Multisource domain adaptation and its application to early detection of fatigue. ACM Transactions on Knowledge Discovery from Data (TKDD), 6(4):18, 2012. 2",
        "[35] P. Lucey, J. F. Cohn, T. Kanade, J. Saragih, Z. Ambadar, and I. Matthews. The extended cohn-kanade dataset (ck+): A complete dataset for action unit and emotion-speciﬁed expression. In CVPR, pages 94–101. IEEE, 2010. 5",
        "based database for facial expression analysis. IEEE, 2005. 5",
        "[44] B. Sun, J. Feng, and K. Saenko. Return of frustratingly easy domain adaptation. In ICCV, TASK-CV, 2015. 1, 2, 6 [45] A. Torralba and A. A. Efros. Unbiased look at dataset bias. In Computer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on, pages 1521–1528. IEEE, 2011. 5 [46] E. Tzeng, J. Hoffman, T. Darrell, and K. Saenko. Simultaneous deep transfer across domains and tasks. In Proceedings of the IEEE International Conference on Computer Vision, pages 4068–4076, 2015. 1, 2, 3",
        "We implement the linear MK-MMD loss according to [24]. For this derivation, we consider the loss at just one layer. The derivative for the MK-MMD loss at every other layer can be derived in a similar manner. The output of ith source data point at layer l is represented as ui and the output of the ith target data point is represented as vi. For ease of representation, we drop the superscripts for the source (s), the target (t) and the layer (l). Unlike the conventional MMD loss which is O(n2), the MK-MMD loss outlined in [24] is O(n) and can be estimated online (does not require all the data). The loss is calculated over every batch of data points during the back-propagation. Let n be the number of source data points U := {ui}n i=1 and the number of target data points V := {vi}n i=1 in the batch. We assume equal number of source and target data points in a batch and that n is even. The MK-MMD is deﬁned over a set of 4 data points wi = [u2i−1,u2i,v2i−1,v2i],∀i ∈ {1,2,...,n/2}. The MK-MMD is given by,",
        "where, I{.} is the indicator function which is 1 if the condition is true, else it is false. The derivative w.r.t. the target data output vq is,",
        "The partial derivative of 5 w.r.t. source data output up is given by,",
        "and pij is the probability of target data output ut",
        "For ease of representation, we will denote the target output ut P kth source data point in the jth category usj the news terms as,",
        "We need to estimate both, ∂Hij ∂vi data. The derivative ∂Hij ∂up q",
        "In the main paper we had presented results for unsuperviseddomain adaptation based object recognition with d = 64 bits. Here, we outline the classiﬁcation results with d = 16 (DAH-16) and d = 128 (DAH-128) bits for the Ofﬁce-Home dataset in Table 5. We also present the (DAH-64), DAN and DANN results for comparison. There is an increase in the average recognition accuracy for d = 128 bits compared to d = 64 bits because of the increased capacity in representation. As expected, d = 16 has a lower recognition accuracy. Table 5: Recognition accuracies (%) for domain adaptation experiments on the Ofﬁce-Home dataset. {Art (Ar), Clipart (Cl), Product (Pr), Real-World (Rw)}. Ar→Cl implies Ar is source and Cl is target.",
        "Figure 6: Precision-Recall curves @16 bits for the Ofﬁce-Home dataset. Comparison of hashing without domain adaptation (NoDA), shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep unsupervised hashing (BA, BDNN), unsupervised domain adaptive hashing (DAH) and supervised hashing (SuH). Best viewed in color.",
        "Figure 7: Precision-Recall curves @128 bits for the Ofﬁce-Home dataset. Comparison of hashing without domain adaptation (NoDA), shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep unsupervised hashing (BA, BDNN), unsupervised domain adaptive hashing (DAH) and supervised hashing (SuH). Best viewed in color."
    ]
}